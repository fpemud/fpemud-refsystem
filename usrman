#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import sys
import shutil
import argparse
sys.path.append('/usr/lib64/fpemud-refsystem')
from fm_util import FmUtil
from fm_util import InfoPrinter
from fm_param import UsrParam
from usr_checker import FmChecker
from usr_main import FmMain


def getArgParser():
    parser = argparse.ArgumentParser()
    subParsers = parser.add_subparsers()

    parser2 = subParsers.add_parser("show", help="Show user information")
    parser2.set_defaults(op="show")

    parser2 = subParsers.add_parser("check", help="Check the user data")
    parser2.set_defaults(op="check")
    parser2.add_argument("--auto-fix", action="store_true")

    parser2 = subParsers.add_parser("change-password", help="Change user's password")
    parser2.set_defaults(op="change-password")

    parser2 = subParsers.add_parser("flush", help="Flush user for all the applications")
    parser2.set_defaults(op="flush")

    return parser


def die(msg):
    print(msg)
    sys.exit(1)


###############################################################################


param = UsrParam()

if os.path.exists(param.tmpDir):
    die("%s exists. Another usrman instance is running?" % (param.tmpDir))

args = getArgParser().parse_args()

FmUtil.mkDirAndClear(param.tmpDir)
try:
    param.infoPrinter = InfoPrinter()
    param.checker = FmChecker(param, os.getuid())

    if args.op == "show":
        FmMain(param).doShow()
    elif args.op == "check":
        param.checker.doCheck(args.auto_fix)
    elif args.op == "change-password":
        FmMain(param).doChangePassword()
    elif args.op == "flush":
        FmMain(param).doFlush()
    else:
        raise Exception("Invalid sub command")
finally:
    if os.path.exists(param.tmpDir):
        shutil.rmtree(param.tmpDir)
